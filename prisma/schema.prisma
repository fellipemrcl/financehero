// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // Auth.js related fields
  accounts     Account[]
  sessions     Session[]
  
  // App specific relationships
  userAccounts FinancialAccount[]      @relation("UserAccounts")
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
  goals        Goal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model FinancialAccount {
  id          String      @id @default(cuid())
  name        String
  type        AccountType
  balance     Decimal     @default(0)
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamentos
  user         User          @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  transactions Transaction[]

  @@map("accounts")
}

model Category {
  id          String      @id @default(cuid())
  name        String
  color       String?
  icon        String?
  type        CategoryType
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamentos
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  transactions Transaction[]
  budgets      Budget[]

  @@unique([name, userId])
  @@map("categories")
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Decimal
  description String
  date        DateTime
  type        TransactionType
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relacionamentos
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  account    FinancialAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@map("transactions")
}

model Budget {
  id         String   @id @default(cuid())
  name       String
  amount     Decimal
  spent      Decimal  @default(0)
  period     Period
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacionamentos
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@map("budgets")
}

model Goal {
  id            String     @id @default(cuid())
  name          String
  description   String?
  targetAmount  Decimal
  currentAmount Decimal    @default(0)
  targetDate    DateTime
  status        GoalStatus @default(ACTIVE)
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relacionamentos
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("goals")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  CASH
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum Period {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
